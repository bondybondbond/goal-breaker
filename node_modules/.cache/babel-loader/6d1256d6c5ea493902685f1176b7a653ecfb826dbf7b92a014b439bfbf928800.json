{"ast":null,"code":"/**\r\n * Convert goals structure to Mermaid diagram format\r\n * @param mainGoal - The main goal text (can be empty if using goals array)\r\n * @param goals - Array of goal objects\r\n * @returns Mermaid diagram string\r\n */\nexport const exportToMermaid = (mainGoal, goals) => {\n  if (goals.length === 0) return '';\n  const lines = ['graph TD'];\n\n  // Generate unique node IDs (A, B, C, etc.)\n  const getNodeId = index => {\n    return String.fromCharCode(65 + index); // A, B, C, D...\n  };\n\n  // Sort goals by level and creation order for consistent output\n  const sortedGoals = [...goals].sort((a, b) => {\n    if (a.level !== b.level) return a.level - b.level;\n    return a.id - b.id;\n  });\n\n  // Create mapping of goal.id to node ID\n  const goalToNodeId = new Map();\n  sortedGoals.forEach((goal, index) => {\n    goalToNodeId.set(goal.id, getNodeId(index));\n  });\n\n  // Add goal nodes\n  sortedGoals.forEach(goal => {\n    const nodeId = goalToNodeId.get(goal.id);\n    const emoji = goal.completed ? '✅' : '📝';\n    const escapedText = goal.text.replace(/\"/g, '\\\\\"'); // Escape quotes\n    const displayText = goal.text || (goal.level === 0 ? 'Main Goal' : 'Untitled Task');\n    lines.push(`    ${nodeId}[\"${emoji} ${escapedText || displayText}\"]`);\n  });\n\n  // Add connections\n  sortedGoals.forEach(goal => {\n    const childNodeId = goalToNodeId.get(goal.id);\n    if (goal.parentId !== null) {\n      // Connect to parent goal\n      const parentNodeId = goalToNodeId.get(goal.parentId);\n      if (parentNodeId) {\n        lines.push(`    ${parentNodeId} --> ${childNodeId}`);\n      }\n    }\n  });\n  return lines.join('\\n');\n};\n;\n\n/**\r\n * Copy text to clipboard with fallback for older browsers\r\n * @param text - Text to copy\r\n * @returns Promise<boolean> - Success status\r\n */\nexport const copyToClipboard = async text => {\n  try {\n    if (navigator.clipboard && window.isSecureContext) {\n      await navigator.clipboard.writeText(text);\n      return true;\n    } else {\n      // Fallback for older browsers\n      const textArea = document.createElement('textarea');\n      textArea.value = text;\n      textArea.style.position = 'fixed';\n      textArea.style.left = '-999999px';\n      textArea.style.top = '-999999px';\n      document.body.appendChild(textArea);\n      textArea.focus();\n      textArea.select();\n      const result = document.execCommand('copy');\n      document.body.removeChild(textArea);\n      return result;\n    }\n  } catch (error) {\n    console.error('Failed to copy to clipboard:', error);\n    return false;\n  }\n};","map":{"version":3,"names":["exportToMermaid","mainGoal","goals","length","lines","getNodeId","index","String","fromCharCode","sortedGoals","sort","a","b","level","id","goalToNodeId","Map","forEach","goal","set","nodeId","get","emoji","completed","escapedText","text","replace","displayText","push","childNodeId","parentId","parentNodeId","join","copyToClipboard","navigator","clipboard","window","isSecureContext","writeText","textArea","document","createElement","value","style","position","left","top","body","appendChild","focus","select","result","execCommand","removeChild","error","console"],"sources":["C:/apps/goal-breaker/src/utils/mermaidHelpers.ts"],"sourcesContent":["import { Goal } from '../types/goal.types';\r\n\r\n/**\r\n * Convert goals structure to Mermaid diagram format\r\n * @param mainGoal - The main goal text (can be empty if using goals array)\r\n * @param goals - Array of goal objects\r\n * @returns Mermaid diagram string\r\n */\r\nexport const exportToMermaid = (mainGoal: string, goals: Goal[]): string => {\r\n  if (goals.length === 0) return '';\r\n  \r\n  const lines: string[] = ['graph TD'];\r\n  \r\n  // Generate unique node IDs (A, B, C, etc.)\r\n  const getNodeId = (index: number): string => {\r\n    return String.fromCharCode(65 + index); // A, B, C, D...\r\n  };\r\n  \r\n  // Sort goals by level and creation order for consistent output\r\n  const sortedGoals = [...goals].sort((a, b) => {\r\n    if (a.level !== b.level) return a.level - b.level;\r\n    return a.id - b.id;\r\n  });\r\n  \r\n  // Create mapping of goal.id to node ID\r\n  const goalToNodeId = new Map<number, string>();\r\n  sortedGoals.forEach((goal, index) => {\r\n    goalToNodeId.set(goal.id, getNodeId(index));\r\n  });\r\n  \r\n  // Add goal nodes\r\n  sortedGoals.forEach((goal) => {\r\n    const nodeId = goalToNodeId.get(goal.id);\r\n    const emoji = goal.completed ? '✅' : '📝';\r\n    const escapedText = goal.text.replace(/\"/g, '\\\\\"'); // Escape quotes\r\n    const displayText = goal.text || (goal.level === 0 ? 'Main Goal' : 'Untitled Task');\r\n    lines.push(`    ${nodeId}[\"${emoji} ${escapedText || displayText}\"]`);\r\n  });\r\n  \r\n  // Add connections\r\n  sortedGoals.forEach((goal) => {\r\n    const childNodeId = goalToNodeId.get(goal.id);\r\n    \r\n    if (goal.parentId !== null) {\r\n      // Connect to parent goal\r\n      const parentNodeId = goalToNodeId.get(goal.parentId);\r\n      if (parentNodeId) {\r\n        lines.push(`    ${parentNodeId} --> ${childNodeId}`);\r\n      }\r\n    }\r\n  });\r\n  \r\n  return lines.join('\\n');\r\n};;\r\n\r\n/**\r\n * Copy text to clipboard with fallback for older browsers\r\n * @param text - Text to copy\r\n * @returns Promise<boolean> - Success status\r\n */\r\nexport const copyToClipboard = async (text: string): Promise<boolean> => {\r\n  try {\r\n    if (navigator.clipboard && window.isSecureContext) {\r\n      await navigator.clipboard.writeText(text);\r\n      return true;\r\n    } else {\r\n      // Fallback for older browsers\r\n      const textArea = document.createElement('textarea');\r\n      textArea.value = text;\r\n      textArea.style.position = 'fixed';\r\n      textArea.style.left = '-999999px';\r\n      textArea.style.top = '-999999px';\r\n      document.body.appendChild(textArea);\r\n      textArea.focus();\r\n      textArea.select();\r\n      const result = document.execCommand('copy');\r\n      document.body.removeChild(textArea);\r\n      return result;\r\n    }\r\n  } catch (error) {\r\n    console.error('Failed to copy to clipboard:', error);\r\n    return false;\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}